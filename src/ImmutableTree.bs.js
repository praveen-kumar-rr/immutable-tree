// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var Caml_obj = require("@rescript/std/lib/js/caml_obj.js");
var Belt_List = require("@rescript/std/lib/js/belt_List.js");
var Pervasives = require("@rescript/std/lib/js/pervasives.js");
var Caml_option = require("@rescript/std/lib/js/caml_option.js");

function Make(C) {
  var comp = function (a, b) {
    if (Curry._2(C.compare, a, b) > 0) {
      return /* GT */1;
    } else if (Curry._2(C.compare, a, b) < 0) {
      return /* LT */2;
    } else {
      return /* EQ */0;
    }
  };
  var max = function (a, b) {
    if (Caml_obj.caml_greaterthan(a, b) || !Caml_obj.caml_lessthan(a, b)) {
      return a;
    } else {
      return b;
    }
  };
  var empty = function (param) {
    return /* Leaf */0;
  };
  var getColor = function (t) {
    if (typeof t === "number") {
      return ;
    } else if (t.TAG === /* TreeNode */0) {
      return t._0 ? "Black" : "Red";
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var getData = function (t) {
    if (typeof t === "number") {
      return ;
    } else if (t.TAG === /* TreeNode */0) {
      return Caml_option.some(t._2);
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var balance = function (tree) {
    var a;
    var x;
    var b;
    var y;
    var c;
    var z;
    var d;
    if (typeof tree === "number") {
      return /* Leaf */0;
    }
    if (tree.TAG !== /* TreeNode */0) {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
    if (!tree._0) {
      return tree;
    }
    var a$1 = tree._1;
    var exit = 0;
    if (typeof a$1 === "number" || !(a$1.TAG === /* TreeNode */0 && !a$1._0)) {
      exit = 2;
    } else {
      var a$2 = a$1._1;
      var exit$1 = 0;
      if (typeof a$2 === "number" || !(a$2.TAG === /* TreeNode */0 && !a$2._0)) {
        exit$1 = 3;
      } else {
        a = a$2._1;
        x = a$2._2;
        b = a$2._3;
        y = a$1._2;
        c = a$1._3;
        z = tree._2;
        d = tree._3;
      }
      if (exit$1 === 3) {
        var match = a$1._3;
        if (typeof match === "number" || !(match.TAG === /* TreeNode */0 && !match._0)) {
          exit = 2;
        } else {
          a = a$2;
          x = a$1._2;
          b = match._1;
          y = match._2;
          c = match._3;
          z = tree._2;
          d = tree._3;
        }
      }
      
    }
    if (exit === 2) {
      var match$1 = tree._3;
      var x$1 = tree._2;
      if (typeof match$1 === "number") {
        return tree;
      }
      if (match$1.TAG !== /* TreeNode */0) {
        return tree;
      }
      if (match$1._0) {
        return tree;
      }
      var b$1 = match$1._1;
      var exit$2 = 0;
      if (typeof b$1 === "number" || !(b$1.TAG === /* TreeNode */0 && !b$1._0)) {
        exit$2 = 3;
      } else {
        a = a$1;
        x = x$1;
        b = b$1._1;
        y = b$1._2;
        c = b$1._3;
        z = match$1._2;
        d = match$1._3;
      }
      if (exit$2 === 3) {
        var match$2 = match$1._3;
        if (typeof match$2 === "number") {
          return tree;
        }
        if (match$2.TAG !== /* TreeNode */0) {
          return tree;
        }
        if (match$2._0) {
          return tree;
        }
        a = a$1;
        x = x$1;
        b = b$1;
        y = match$1._2;
        c = match$2._1;
        z = match$2._2;
        d = match$2._3;
      }
      
    }
    return {
            TAG: /* TreeNode */0,
            _0: /* Red */0,
            _1: {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: a,
              _2: x,
              _3: b
            },
            _2: y,
            _3: {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: c,
              _2: z,
              _3: d
            }
          };
  };
  var getLeftBlackCount = function (_tree, _c) {
    while(true) {
      var c = _c;
      var tree = _tree;
      if (typeof tree === "number") {
        return c;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      if (tree._0) {
        _c = c + 1 | 0;
        _tree = tree._1;
        continue ;
      }
      _tree = tree._1;
      continue ;
    };
  };
  var getRightBlackCount = function (_tree, _c) {
    while(true) {
      var c = _c;
      var tree = _tree;
      if (typeof tree === "number") {
        return c;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      if (tree._0) {
        _c = c + 1 | 0;
        _tree = tree._3;
        continue ;
      }
      _tree = tree._3;
      continue ;
    };
  };
  var checkBlackBalance = function (tree) {
    var _checkBlackBalance = function (_tree, _result) {
      while(true) {
        var result = _result;
        var tree = _tree;
        if (typeof tree === "number") {
          return result;
        }
        if (tree.TAG !== /* TreeNode */0) {
          return Pervasives.failwith("Imbalanced Tree detected");
        }
        var leftCount = getLeftBlackCount(tree, 0);
        var rightCount = getRightBlackCount(tree, 0);
        if (!(leftCount === rightCount && _checkBlackBalance(tree._1, true))) {
          return false;
        }
        _result = true;
        _tree = tree._3;
        continue ;
      };
    };
    return _checkBlackBalance(tree, true);
  };
  var insert = function (tree, value) {
    var ins = function (t) {
      if (typeof t === "number") {
        return {
                TAG: /* TreeNode */0,
                _0: /* Red */0,
                _1: /* Leaf */0,
                _2: value,
                _3: /* Leaf */0
              };
      }
      if (t.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var r = t._3;
      var d = t._2;
      var l = t._1;
      var c = t._0;
      var match = comp(value, d);
      switch (match) {
        case /* EQ */0 :
            return t;
        case /* GT */1 :
            return balance({
                        TAG: /* TreeNode */0,
                        _0: c,
                        _1: l,
                        _2: d,
                        _3: ins(r)
                      });
        case /* LT */2 :
            return balance({
                        TAG: /* TreeNode */0,
                        _0: c,
                        _1: ins(l),
                        _2: d,
                        _3: r
                      });
        
      }
    };
    var match = ins(tree);
    if (typeof match === "number") {
      return /* Leaf */0;
    } else if (match.TAG === /* TreeNode */0) {
      return {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: match._1,
              _2: match._2,
              _3: match._3
            };
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var search = function (_tree, v) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return ;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var d = tree._2;
      var match = comp(v, d);
      switch (match) {
        case /* EQ */0 :
            return Caml_option.some(d);
        case /* GT */1 :
            _tree = tree._3;
            continue ;
        case /* LT */2 :
            _tree = tree._1;
            continue ;
        
      }
    };
  };
  var searchRange = function (tree, start, end) {
    var _searchRange = function (_tree, start, end, _acc) {
      while(true) {
        var acc = _acc;
        var tree = _tree;
        if (typeof tree === "number") {
          return acc;
        }
        if (tree.TAG !== /* TreeNode */0) {
          return Pervasives.failwith("Imbalanced Tree detected");
        }
        var d = tree._2;
        var match = comp(d, start);
        var match$1 = comp(d, end);
        if (match >= 2) {
          return acc;
        }
        if (match$1 === 1) {
          return acc;
        }
        var leftResult = _searchRange(tree._1, start, end, acc);
        var nextAcc = {
          hd: d,
          tl: leftResult
        };
        _acc = nextAcc;
        _tree = tree._3;
        continue ;
      };
    };
    return Belt_List.toArray(Belt_List.reverse(_searchRange(tree, start, end, /* [] */0)));
  };
  var update = function (tree, old, next) {
    if (typeof tree === "number") {
      return tree;
    }
    if (tree.TAG !== /* TreeNode */0) {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
    var r = tree._3;
    var d = tree._2;
    var l = tree._1;
    var c = tree._0;
    var match = comp(old, d);
    switch (match) {
      case /* EQ */0 :
          return {
                  TAG: /* TreeNode */0,
                  _0: c,
                  _1: l,
                  _2: next,
                  _3: r
                };
      case /* GT */1 :
          return {
                  TAG: /* TreeNode */0,
                  _0: c,
                  _1: l,
                  _2: d,
                  _3: update(r, old, next)
                };
      case /* LT */2 :
          return {
                  TAG: /* TreeNode */0,
                  _0: c,
                  _1: update(l, old, next),
                  _2: d,
                  _3: r
                };
      
    }
  };
  var getMax = function (tree) {
    var _tree = tree;
    var _result;
    while(true) {
      var result = _result;
      var tree$1 = _tree;
      if (typeof tree$1 === "number") {
        return result;
      }
      if (tree$1.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      _result = Caml_option.some(tree$1._2);
      _tree = tree$1._3;
      continue ;
    };
  };
  var getMin = function (tree) {
    var _tree = tree;
    var _result;
    while(true) {
      var result = _result;
      var tree$1 = _tree;
      if (typeof tree$1 === "number") {
        return result;
      }
      if (tree$1.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      _result = Caml_option.some(tree$1._2);
      _tree = tree$1._1;
      continue ;
    };
  };
  var nodeFromDoubleBlack = function (tree) {
    if (typeof tree === "number") {
      return tree;
    }
    if (tree.TAG === /* TreeNode */0) {
      return tree;
    }
    var d = tree._1;
    if (d !== undefined) {
      return {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: tree._0,
              _2: Caml_option.valFromOption(d),
              _3: tree._2
            };
    } else {
      return /* Leaf */0;
    }
  };
  var balanceDoubleBlackNode = function (_tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return /* Leaf */0;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return tree;
      }
      var vColor = tree._0;
      if (vColor) {
        var db = tree._1;
        if (typeof db === "number") {
          var db$1 = tree._3;
          if (typeof db$1 === "number" || db$1.TAG === /* TreeNode */0) {
            return tree;
          } else {
            return {
                    TAG: /* DoubleBlack */1,
                    _0: /* Leaf */0,
                    _1: Caml_option.some(tree._2),
                    _2: nodeFromDoubleBlack(db$1)
                  };
          }
        }
        if (db.TAG === /* TreeNode */0) {
          if (db._0) {
            var match = db._1;
            if (typeof match === "number") {
              var match$1 = db._3;
              var v = db._2;
              if (typeof match$1 === "number") {
                var db$2 = tree._3;
                if (typeof db$2 === "number" || db$2.TAG === /* TreeNode */0) {
                  return tree;
                } else {
                  return {
                          TAG: /* DoubleBlack */1,
                          _0: {
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: /* Leaf */0,
                            _2: v,
                            _3: /* Leaf */0
                          },
                          _1: Caml_option.some(tree._2),
                          _2: nodeFromDoubleBlack(db$2)
                        };
                }
              }
              if (match$1.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (match$1._0) {
                var db$3 = tree._3;
                if (typeof db$3 === "number" || db$3.TAG === /* TreeNode */0) {
                  return tree;
                } else {
                  return {
                          TAG: /* DoubleBlack */1,
                          _0: {
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: /* Leaf */0,
                            _2: v,
                            _3: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: match$1._1,
                              _2: match$1._2,
                              _3: match$1._3
                            }
                          },
                          _1: Caml_option.some(tree._2),
                          _2: nodeFromDoubleBlack(db$3)
                        };
                }
              }
              var db$4 = tree._3;
              if (typeof db$4 === "number") {
                return tree;
              }
              if (db$4.TAG === /* TreeNode */0) {
                return tree;
              }
              _tree = {
                TAG: /* TreeNode */0,
                _0: /* Black */1,
                _1: {
                  TAG: /* TreeNode */0,
                  _0: /* Black */1,
                  _1: {
                    TAG: /* TreeNode */0,
                    _0: /* Red */0,
                    _1: /* Leaf */0,
                    _2: v,
                    _3: match$1._1
                  },
                  _2: match$1._2,
                  _3: match$1._3
                },
                _2: tree._2,
                _3: nodeFromDoubleBlack(db$4)
              };
              continue ;
            } else {
              if (match.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (match._0) {
                var match$2 = db._3;
                var v$1 = db._2;
                var b = match._3;
                var u = match._2;
                var a = match._1;
                if (typeof match$2 === "number") {
                  var db$5 = tree._3;
                  if (typeof db$5 === "number" || db$5.TAG === /* TreeNode */0) {
                    return tree;
                  } else {
                    return {
                            TAG: /* DoubleBlack */1,
                            _0: {
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: {
                                TAG: /* TreeNode */0,
                                _0: /* Black */1,
                                _1: a,
                                _2: u,
                                _3: b
                              },
                              _2: v$1,
                              _3: /* Leaf */0
                            },
                            _1: Caml_option.some(tree._2),
                            _2: nodeFromDoubleBlack(db$5)
                          };
                  }
                }
                if (match$2.TAG !== /* TreeNode */0) {
                  return tree;
                }
                if (match$2._0) {
                  var db$6 = tree._3;
                  if (typeof db$6 === "number" || db$6.TAG === /* TreeNode */0) {
                    return tree;
                  } else {
                    return {
                            TAG: /* DoubleBlack */1,
                            _0: {
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: {
                                TAG: /* TreeNode */0,
                                _0: /* Black */1,
                                _1: a,
                                _2: u,
                                _3: b
                              },
                              _2: v$1,
                              _3: {
                                TAG: /* TreeNode */0,
                                _0: /* Black */1,
                                _1: match$2._1,
                                _2: match$2._2,
                                _3: match$2._3
                              }
                            },
                            _1: Caml_option.some(tree._2),
                            _2: nodeFromDoubleBlack(db$6)
                          };
                  }
                }
                var db$7 = tree._3;
                if (typeof db$7 === "number") {
                  return tree;
                }
                if (db$7.TAG === /* TreeNode */0) {
                  return tree;
                }
                _tree = {
                  TAG: /* TreeNode */0,
                  _0: /* Black */1,
                  _1: {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: {
                      TAG: /* TreeNode */0,
                      _0: /* Red */0,
                      _1: {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: a,
                        _2: u,
                        _3: b
                      },
                      _2: v$1,
                      _3: match$2._1
                    },
                    _2: match$2._2,
                    _3: match$2._3
                  },
                  _2: tree._2,
                  _3: nodeFromDoubleBlack(db$7)
                };
                continue ;
              }
              
            }
          } else {
            var match$3 = db._1;
            if (typeof match$3 === "number") {
              var match$4 = db._3;
              var v$2 = db._2;
              if (typeof match$4 === "number") {
                var db$8 = tree._3;
                if (typeof db$8 === "number" || db$8.TAG === /* TreeNode */0) {
                  return tree;
                } else {
                  return {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: /* Leaf */0,
                          _2: v$2,
                          _3: balanceDoubleBlackNode({
                                TAG: /* TreeNode */0,
                                _0: /* Red */0,
                                _1: /* Leaf */0,
                                _2: tree._2,
                                _3: db$8
                              })
                        };
                }
              }
              if (match$4.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (!match$4._0) {
                return tree;
              }
              var db$9 = tree._3;
              if (typeof db$9 === "number" || db$9.TAG === /* TreeNode */0) {
                return tree;
              } else {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: /* Leaf */0,
                        _2: v$2,
                        _3: balanceDoubleBlackNode({
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: {
                                TAG: /* TreeNode */0,
                                _0: /* Black */1,
                                _1: match$4._1,
                                _2: match$4._2,
                                _3: match$4._3
                              },
                              _2: tree._2,
                              _3: db$9
                            })
                      };
              }
            } else {
              if (match$3.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (!match$3._0) {
                return tree;
              }
              var match$5 = db._3;
              var v$3 = db._2;
              var b$1 = match$3._3;
              var u$1 = match$3._2;
              var a$1 = match$3._1;
              if (typeof match$5 === "number") {
                var db$10 = tree._3;
                if (typeof db$10 === "number" || db$10.TAG === /* TreeNode */0) {
                  return tree;
                } else {
                  return {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: {
                            TAG: /* TreeNode */0,
                            _0: /* Black */1,
                            _1: a$1,
                            _2: u$1,
                            _3: b$1
                          },
                          _2: v$3,
                          _3: balanceDoubleBlackNode({
                                TAG: /* TreeNode */0,
                                _0: /* Red */0,
                                _1: /* Leaf */0,
                                _2: tree._2,
                                _3: db$10
                              })
                        };
                }
              }
              if (match$5.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (!match$5._0) {
                return tree;
              }
              var db$11 = tree._3;
              if (typeof db$11 === "number" || db$11.TAG === /* TreeNode */0) {
                return tree;
              } else {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: a$1,
                          _2: u$1,
                          _3: b$1
                        },
                        _2: v$3,
                        _3: balanceDoubleBlackNode({
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: {
                                TAG: /* TreeNode */0,
                                _0: /* Black */1,
                                _1: match$5._1,
                                _2: match$5._2,
                                _3: match$5._3
                              },
                              _2: tree._2,
                              _3: db$11
                            })
                      };
              }
            }
          }
        } else {
          var match$6 = tree._3;
          var v$4 = tree._2;
          if (typeof match$6 === "number") {
            return {
                    TAG: /* DoubleBlack */1,
                    _0: nodeFromDoubleBlack(db),
                    _1: Caml_option.some(v$4),
                    _2: /* Leaf */0
                  };
          }
          if (match$6.TAG !== /* TreeNode */0) {
            return tree;
          }
          if (match$6._0) {
            var match$7 = match$6._1;
            if (typeof match$7 === "number") {
              var match$8 = match$6._3;
              var x = match$6._2;
              if (typeof match$8 === "number") {
                return {
                        TAG: /* DoubleBlack */1,
                        _0: nodeFromDoubleBlack(db),
                        _1: Caml_option.some(v$4),
                        _2: {
                          TAG: /* TreeNode */0,
                          _0: /* Red */0,
                          _1: /* Leaf */0,
                          _2: x,
                          _3: /* Leaf */0
                        }
                      };
              }
              if (match$8.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (match$8._0) {
                return {
                        TAG: /* DoubleBlack */1,
                        _0: nodeFromDoubleBlack(db),
                        _1: Caml_option.some(v$4),
                        _2: {
                          TAG: /* TreeNode */0,
                          _0: /* Red */0,
                          _1: /* Leaf */0,
                          _2: x,
                          _3: {
                            TAG: /* TreeNode */0,
                            _0: /* Black */1,
                            _1: match$8._1,
                            _2: match$8._2,
                            _3: match$8._3
                          }
                        }
                      };
              }
              
            } else if (match$7.TAG === /* TreeNode */0) {
              if (match$7._0) {
                var match$9 = match$6._3;
                var x$1 = match$6._2;
                var d = match$7._3;
                var w = match$7._2;
                var c = match$7._1;
                if (typeof match$9 === "number") {
                  return {
                          TAG: /* DoubleBlack */1,
                          _0: nodeFromDoubleBlack(db),
                          _1: Caml_option.some(v$4),
                          _2: {
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: c,
                              _2: w,
                              _3: d
                            },
                            _2: x$1,
                            _3: /* Leaf */0
                          }
                        };
                }
                if (match$9.TAG !== /* TreeNode */0) {
                  return tree;
                }
                if (match$9._0) {
                  return {
                          TAG: /* DoubleBlack */1,
                          _0: nodeFromDoubleBlack(db),
                          _1: Caml_option.some(v$4),
                          _2: {
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: c,
                              _2: w,
                              _3: d
                            },
                            _2: x$1,
                            _3: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: match$9._1,
                              _2: match$9._2,
                              _3: match$9._3
                            }
                          }
                        };
                }
                
              } else {
                var match$10 = match$6._3;
                var x$2 = match$6._2;
                var d$1 = match$7._3;
                var w$1 = match$7._2;
                var c$1 = match$7._1;
                if (typeof match$10 === "number") {
                  _tree = {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: nodeFromDoubleBlack(db),
                    _2: v$4,
                    _3: {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: c$1,
                      _2: w$1,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: d$1,
                        _2: x$2,
                        _3: /* Leaf */0
                      }
                    }
                  };
                  continue ;
                }
                if (match$10.TAG !== /* TreeNode */0) {
                  return tree;
                }
                if (match$10._0) {
                  _tree = {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: nodeFromDoubleBlack(db),
                    _2: v$4,
                    _3: {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: c$1,
                      _2: w$1,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: d$1,
                        _2: x$2,
                        _3: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: match$10._1,
                          _2: match$10._2,
                          _3: match$10._3
                        }
                      }
                    }
                  };
                  continue ;
                }
                
              }
            }
            
          } else {
            var match$11 = match$6._1;
            if (typeof match$11 === "number") {
              var match$12 = match$6._3;
              var x$3 = match$6._2;
              if (typeof match$12 === "number") {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: balanceDoubleBlackNode({
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: db,
                              _2: v$4,
                              _3: /* Leaf */0
                            }),
                        _2: x$3,
                        _3: /* Leaf */0
                      };
              } else if (match$12.TAG === /* TreeNode */0 && match$12._0) {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: balanceDoubleBlackNode({
                              TAG: /* TreeNode */0,
                              _0: /* Red */0,
                              _1: db,
                              _2: v$4,
                              _3: /* Leaf */0
                            }),
                        _2: x$3,
                        _3: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: match$12._1,
                          _2: match$12._2,
                          _3: match$12._3
                        }
                      };
              } else {
                return tree;
              }
            }
            if (match$11.TAG !== /* TreeNode */0) {
              return tree;
            }
            if (!match$11._0) {
              return tree;
            }
            var match$13 = match$6._3;
            var x$4 = match$6._2;
            var d$2 = match$11._3;
            var w$2 = match$11._2;
            var c$2 = match$11._1;
            if (typeof match$13 === "number") {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: balanceDoubleBlackNode({
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: db,
                            _2: v$4,
                            _3: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: c$2,
                              _2: w$2,
                              _3: d$2
                            }
                          }),
                      _2: x$4,
                      _3: /* Leaf */0
                    };
            } else if (match$13.TAG === /* TreeNode */0 && match$13._0) {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: balanceDoubleBlackNode({
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: db,
                            _2: v$4,
                            _3: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: c$2,
                              _2: w$2,
                              _3: d$2
                            }
                          }),
                      _2: x$4,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: match$13._1,
                        _2: match$13._2,
                        _3: match$13._3
                      }
                    };
            } else {
              return tree;
            }
          }
        }
      } else {
        var db$12 = tree._1;
        if (typeof db$12 === "number") {
          var db$13 = tree._3;
          if (typeof db$13 === "number" || db$13.TAG === /* TreeNode */0) {
            return tree;
          } else {
            return {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: /* Leaf */0,
                    _2: tree._2,
                    _3: nodeFromDoubleBlack(db$13)
                  };
          }
        }
        if (db$12.TAG === /* TreeNode */0) {
          if (!db$12._0) {
            return tree;
          }
          var match$14 = db$12._1;
          if (typeof match$14 === "number") {
            var match$15 = db$12._3;
            var v$5 = db$12._2;
            if (typeof match$15 === "number") {
              var db$14 = tree._3;
              if (typeof db$14 === "number" || db$14.TAG === /* TreeNode */0) {
                return tree;
              } else {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: {
                          TAG: /* TreeNode */0,
                          _0: /* Red */0,
                          _1: /* Leaf */0,
                          _2: v$5,
                          _3: /* Leaf */0
                        },
                        _2: tree._2,
                        _3: nodeFromDoubleBlack(db$14)
                      };
              }
            }
            if (match$15.TAG !== /* TreeNode */0) {
              return tree;
            }
            if (!match$15._0) {
              return tree;
            }
            var db$15 = tree._3;
            if (typeof db$15 === "number" || db$15.TAG === /* TreeNode */0) {
              return tree;
            } else {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: /* Leaf */0,
                        _2: v$5,
                        _3: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: match$15._1,
                          _2: match$15._2,
                          _3: match$15._3
                        }
                      },
                      _2: tree._2,
                      _3: nodeFromDoubleBlack(db$15)
                    };
            }
          } else {
            if (match$14.TAG !== /* TreeNode */0) {
              return tree;
            }
            if (match$14._0) {
              var match$16 = db$12._3;
              var v$6 = db$12._2;
              var b$2 = match$14._3;
              var u$2 = match$14._2;
              var a$2 = match$14._1;
              if (typeof match$16 === "number") {
                var db$16 = tree._3;
                if (typeof db$16 === "number" || db$16.TAG === /* TreeNode */0) {
                  return tree;
                } else {
                  return {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: {
                            TAG: /* TreeNode */0,
                            _0: /* Red */0,
                            _1: {
                              TAG: /* TreeNode */0,
                              _0: /* Black */1,
                              _1: a$2,
                              _2: u$2,
                              _3: b$2
                            },
                            _2: v$6,
                            _3: /* Leaf */0
                          },
                          _2: tree._2,
                          _3: nodeFromDoubleBlack(db$16)
                        };
                }
              }
              if (match$16.TAG !== /* TreeNode */0) {
                return tree;
              }
              if (!match$16._0) {
                return tree;
              }
              var db$17 = tree._3;
              if (typeof db$17 === "number" || db$17.TAG === /* TreeNode */0) {
                return tree;
              } else {
                return {
                        TAG: /* TreeNode */0,
                        _0: /* Black */1,
                        _1: {
                          TAG: /* TreeNode */0,
                          _0: /* Red */0,
                          _1: {
                            TAG: /* TreeNode */0,
                            _0: /* Black */1,
                            _1: a$2,
                            _2: u$2,
                            _3: b$2
                          },
                          _2: v$6,
                          _3: {
                            TAG: /* TreeNode */0,
                            _0: /* Black */1,
                            _1: match$16._1,
                            _2: match$16._2,
                            _3: match$16._3
                          }
                        },
                        _2: tree._2,
                        _3: nodeFromDoubleBlack(db$17)
                      };
              }
            }
            
          }
        } else {
          var match$17 = tree._3;
          var v$7 = tree._2;
          if (typeof match$17 === "number") {
            return {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: nodeFromDoubleBlack(db$12),
                    _2: v$7,
                    _3: /* Leaf */0
                  };
          }
          if (match$17.TAG !== /* TreeNode */0) {
            return tree;
          }
          if (!match$17._0) {
            return tree;
          }
          var match$18 = match$17._1;
          if (typeof match$18 === "number") {
            var match$19 = match$17._3;
            var x$5 = match$17._2;
            if (typeof match$19 === "number") {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: nodeFromDoubleBlack(db$12),
                      _2: v$7,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: /* Leaf */0,
                        _2: x$5,
                        _3: /* Leaf */0
                      }
                    };
            }
            if (match$19.TAG !== /* TreeNode */0) {
              return tree;
            }
            if (match$19._0) {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: nodeFromDoubleBlack(db$12),
                      _2: v$7,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: /* Leaf */0,
                        _2: x$5,
                        _3: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: match$19._1,
                          _2: match$19._2,
                          _3: match$19._3
                        }
                      }
                    };
            }
            
          } else if (match$18.TAG === /* TreeNode */0 && match$18._0) {
            var match$20 = match$17._3;
            var x$6 = match$17._2;
            var d$3 = match$18._3;
            var w$3 = match$18._2;
            var c$3 = match$18._1;
            if (typeof match$20 === "number") {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: nodeFromDoubleBlack(db$12),
                      _2: v$7,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: c$3,
                          _2: w$3,
                          _3: d$3
                        },
                        _2: x$6,
                        _3: /* Leaf */0
                      }
                    };
            }
            if (match$20.TAG !== /* TreeNode */0) {
              return tree;
            }
            if (match$20._0) {
              return {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: nodeFromDoubleBlack(db$12),
                      _2: v$7,
                      _3: {
                        TAG: /* TreeNode */0,
                        _0: /* Red */0,
                        _1: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: c$3,
                          _2: w$3,
                          _3: d$3
                        },
                        _2: x$6,
                        _3: {
                          TAG: /* TreeNode */0,
                          _0: /* Black */1,
                          _1: match$20._1,
                          _2: match$20._2,
                          _3: match$20._3
                        }
                      }
                    };
            }
            
          }
          
        }
      }
      var db$18 = tree._1;
      if (typeof db$18 !== "number") {
        if (db$18.TAG === /* TreeNode */0) {
          var db$19 = tree._3;
          var match$21 = db$18._1;
          if (typeof db$19 === "number" || db$19.TAG === /* TreeNode */0) {
            return tree;
          } else {
            return {
                    TAG: /* TreeNode */0,
                    _0: vColor,
                    _1: {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: match$21._1,
                      _2: match$21._2,
                      _3: match$21._3
                    },
                    _2: db$18._2,
                    _3: {
                      TAG: /* TreeNode */0,
                      _0: /* Black */1,
                      _1: db$18._3,
                      _2: tree._2,
                      _3: nodeFromDoubleBlack(db$19)
                    }
                  };
          }
        }
        var match$22 = tree._3;
        var match$23 = match$22._3;
        if (typeof match$23 === "number" || !(match$23.TAG === /* TreeNode */0 && !match$23._0)) {
          return tree;
        } else {
          return {
                  TAG: /* TreeNode */0,
                  _0: vColor,
                  _1: {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: nodeFromDoubleBlack(db$18),
                    _2: tree._2,
                    _3: match$22._1
                  },
                  _2: match$22._2,
                  _3: {
                    TAG: /* TreeNode */0,
                    _0: /* Black */1,
                    _1: match$23._1,
                    _2: match$23._2,
                    _3: match$23._3
                  }
                };
        }
      }
      
    };
  };
  var deleteNode = function (tr, v) {
    var _deleteNode = function (tree, v) {
      if (typeof tree === "number") {
        return tree;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var r = tree._3;
      var d = tree._2;
      var l = tree._1;
      var color = tree._0;
      var match = comp(v, d);
      switch (match) {
        case /* EQ */0 :
            var minFromRight = getMin(r);
            if (minFromRight !== undefined) {
              var minFromRight$1 = Caml_option.valFromOption(minFromRight);
              return balanceDoubleBlackNode({
                          TAG: /* TreeNode */0,
                          _0: color,
                          _1: l,
                          _2: minFromRight$1,
                          _3: _deleteNode(r, minFromRight$1)
                        });
            }
            var maxFromLeft = getMax(l);
            if (maxFromLeft === undefined) {
              if (color) {
                return {
                        TAG: /* DoubleBlack */1,
                        _0: /* Leaf */0,
                        _1: undefined,
                        _2: /* Leaf */0
                      };
              } else {
                return /* Leaf */0;
              }
            }
            var maxFromLeft$1 = Caml_option.valFromOption(maxFromLeft);
            return balanceDoubleBlackNode({
                        TAG: /* TreeNode */0,
                        _0: color,
                        _1: _deleteNode(l, maxFromLeft$1),
                        _2: maxFromLeft$1,
                        _3: r
                      });
        case /* GT */1 :
            return balanceDoubleBlackNode({
                        TAG: /* TreeNode */0,
                        _0: color,
                        _1: l,
                        _2: d,
                        _3: _deleteNode(r, v)
                      });
        case /* LT */2 :
            return balanceDoubleBlackNode({
                        TAG: /* TreeNode */0,
                        _0: color,
                        _1: _deleteNode(l, v),
                        _2: d,
                        _3: r
                      });
        
      }
    };
    var match = _deleteNode(tr, v);
    if (typeof match === "number") {
      return tr;
    }
    if (match.TAG === /* TreeNode */0) {
      return {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: match._1,
              _2: match._2,
              _3: match._3
            };
    }
    var d = match._1;
    if (d !== undefined) {
      return {
              TAG: /* TreeNode */0,
              _0: /* Black */1,
              _1: match._0,
              _2: Caml_option.valFromOption(d),
              _3: match._2
            };
    } else {
      return /* Leaf */0;
    }
  };
  var traverseInOrder = function (_tree, fn, _acc) {
    while(true) {
      var acc = _acc;
      var tree = _tree;
      if (typeof tree === "number") {
        return acc;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var leftResult = traverseInOrder(tree._1, fn, acc);
      var nextResult = Curry._2(fn, leftResult, tree._2);
      _acc = nextResult;
      _tree = tree._3;
      continue ;
    };
  };
  var traversePreOrder = function (_tree, fn, _acc) {
    while(true) {
      var acc = _acc;
      var tree = _tree;
      if (typeof tree === "number") {
        return acc;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var nextResult = Curry._2(fn, acc, tree._2);
      var leftResult = traversePreOrder(tree._1, fn, nextResult);
      _acc = leftResult;
      _tree = tree._3;
      continue ;
    };
  };
  var traversePostOrder = function (tree, fn, acc) {
    if (typeof tree === "number") {
      return acc;
    }
    if (tree.TAG !== /* TreeNode */0) {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
    var leftResult = traversePostOrder(tree._1, fn, acc);
    var rightResult = traversePostOrder(tree._3, fn, leftResult);
    return Curry._2(fn, rightResult, tree._2);
  };
  var foldRight = function (_tree, fn, _acc) {
    while(true) {
      var acc = _acc;
      var tree = _tree;
      if (typeof tree === "number") {
        return acc;
      }
      if (tree.TAG !== /* TreeNode */0) {
        return Pervasives.failwith("Imbalanced Tree detected");
      }
      var rightResult = foldRight(tree._3, fn, acc);
      var result = Curry._2(fn, rightResult, tree._2);
      _acc = result;
      _tree = tree._1;
      continue ;
    };
  };
  var getLeft = function (tree) {
    if (typeof tree === "number") {
      return ;
    } else if (tree.TAG === /* TreeNode */0) {
      return tree._1;
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var getRight = function (tree) {
    if (typeof tree === "number") {
      return ;
    } else if (tree.TAG === /* TreeNode */0) {
      return tree._3;
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var getHeight = function (tree) {
    if (typeof tree === "number") {
      return 0;
    } else if (tree.TAG === /* TreeNode */0) {
      return max(getHeight(tree._1), getHeight(tree._3)) + 1 | 0;
    } else {
      return Pervasives.failwith("Imbalanced Tree detected");
    }
  };
  var printTreeAsc = function (__x) {
    return traverseInOrder(__x, (function (param, a) {
                  console.log(a);
                  
                }), undefined);
  };
  var printTreeDesc = function (__x) {
    return foldRight(__x, (function (param, a) {
                  console.log(a);
                  
                }), undefined);
  };
  var fromArray = function (__x) {
    return __x.reduce(insert, /* Leaf */0);
  };
  var toArray = function (__x) {
    return traverseInOrder(__x, (function (acc, a) {
                  return acc.concat([a]);
                }), []);
  };
  return {
          insert: insert,
          search: search,
          searchRange: searchRange,
          deleteNode: deleteNode,
          update: update,
          printTreeAsc: printTreeAsc,
          printTreeDesc: printTreeDesc,
          checkBlackBalance: checkBlackBalance,
          getColor: getColor,
          getData: getData,
          getMin: getMin,
          getMax: getMax,
          fromArray: fromArray,
          toArray: toArray,
          traverseInOrder: traverseInOrder,
          traversePreOrder: traversePreOrder,
          traversePostOrder: traversePostOrder,
          fold: traverseInOrder,
          foldLeft: traverseInOrder,
          foldRight: foldRight,
          empty: empty,
          getLeft: getLeft,
          getRight: getRight,
          getHeight: getHeight
        };
}

exports.Make = Make;
/* No side effect */
